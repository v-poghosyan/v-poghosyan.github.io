{"title":"NumPy: Quick Start Guide","markdown":{"yaml":{"title":"NumPy: Quick Start Guide","author":"Vahram Poghosyan","date":"2023-10-27","categories":["Python","NumPy","Machine Learning"],"image":"numpy_quick_start_guide.png","repo-url":"https://www.example.com","format":{"html":{"code-fold":false,"code-line-numbers":true,"code-tools":{"source":"repo"}}},"jupyter":"python3"},"headingText":"Quick Introduction to NumPy","containsRefs":false,"markdown":"\n\n\nPerhaps the most important package for scientific computing included with Conda is NumPy. Let's get a feel for what NumPy offers.\n\n## Python's Built-In Data Types\n\n### Arrays\nA 1D array, or a **vector**, is a collection of scalars (usually, but not necessarily, of similar data type) in a contiguous chunk of computer memory. A 2D array, or a **matrix**, is a collection of vectors. A 3D array (or a higher dimensional array), also referred to as a **tensor**, is a collection of matrices.\n\n## NumPy Data Types\nNumPy exposes the `ndarray` type. This is a multidimensional, homogeneous array type (i.e. its elements are of the same data type) optimized for computing and indexed by a **tuple**. It offeres mathematical indexing (based on Boolean expressions) so that we don't have to write inefficient loops. The terms vector, matrix, and tensor equally apply to `ndarray`s. \n\nTo import NumPy, we can type: \n\n### Working with `ndarray`s\n\n#### Creating `ndarray`s (arange, zero, one)\n\n#### Verifying Type\n\nWe can verify that the object we're working with is, indeed, and `ndarray` by using the built-in Python `type` function.\n\n#### Getting the Shape\n\nThe **shape** of an `ndarray` is in format `(x,y,...)` where `x` corresponds to the number **rows**, `y` corresponds to the number of **columns**, and so on.\n\nHigher dimensional `ndarray`s take tuples of arrays as input:\n\n##### Contrived Example of a Multidimensional `ndarray`\n\nThere is a subtle difference between a 1D array and a 2D array with a single column which is worth exploring. \n\nAs we saw above, `array1` was of shape `(3,)`. Now let's examine the shape of a similar `ndarray` instance.\n\nAs we can see, this one's shape is `(3,1)`.\n\n::: {.callout-tip title=\"ðŸ“– Note\" appearance=\"minimal\" collapse=\"false\"}\nThe shape `(3,)` means a 1D array with 3 elements, meanwhile the shape `(3,1)` means a 2D array with 3 rows and a single column.\n:::\n\nSometimes these differences are just superficial, or the result of data impurities. NumPy provides a method called `np.squeeze` which flattens the arrays by removing axes of length 1.\n\n##### A More Natural Example of a Multidimensional `ndarray`\n\n#### Getting the Dimension\n\nTo get the dimension, we use `ndarray.ndim`. \n\n#### Getting the Data Types of The Elements\n\n`ndarray`s can include numeric types (int, unsigned int, float, complex), text types (string), and null. However, as mentioned above, `ndarrays` can't include more than one data type. To get the data type of the elements, we use `ndarray.dtype`. \n\n#### Reshape\n\nWe can reshape `ndarrays` where it makes sense. For example, we can reshape `array3`, of shape `(2,3)` into an array of shape `(3,2)`, `(6,1)`, or `(1,6)`. \n\nProviding the value `-1` for either row or column makes the reshape automatic across that dimension. For instance, instead of `array3.reshape(3,2)` we could say `array3.reshape(-1,2)` or `array3.reshape(3,-1)`. This would achieve the same effect.\n","srcMarkdownNoYaml":"\n\n# Quick Introduction to NumPy\n\nPerhaps the most important package for scientific computing included with Conda is NumPy. Let's get a feel for what NumPy offers.\n\n## Python's Built-In Data Types\n\n### Arrays\nA 1D array, or a **vector**, is a collection of scalars (usually, but not necessarily, of similar data type) in a contiguous chunk of computer memory. A 2D array, or a **matrix**, is a collection of vectors. A 3D array (or a higher dimensional array), also referred to as a **tensor**, is a collection of matrices.\n\n## NumPy Data Types\nNumPy exposes the `ndarray` type. This is a multidimensional, homogeneous array type (i.e. its elements are of the same data type) optimized for computing and indexed by a **tuple**. It offeres mathematical indexing (based on Boolean expressions) so that we don't have to write inefficient loops. The terms vector, matrix, and tensor equally apply to `ndarray`s. \n\nTo import NumPy, we can type: \n\n### Working with `ndarray`s\n\n#### Creating `ndarray`s (arange, zero, one)\n\n#### Verifying Type\n\nWe can verify that the object we're working with is, indeed, and `ndarray` by using the built-in Python `type` function.\n\n#### Getting the Shape\n\nThe **shape** of an `ndarray` is in format `(x,y,...)` where `x` corresponds to the number **rows**, `y` corresponds to the number of **columns**, and so on.\n\nHigher dimensional `ndarray`s take tuples of arrays as input:\n\n##### Contrived Example of a Multidimensional `ndarray`\n\nThere is a subtle difference between a 1D array and a 2D array with a single column which is worth exploring. \n\nAs we saw above, `array1` was of shape `(3,)`. Now let's examine the shape of a similar `ndarray` instance.\n\nAs we can see, this one's shape is `(3,1)`.\n\n::: {.callout-tip title=\"ðŸ“– Note\" appearance=\"minimal\" collapse=\"false\"}\nThe shape `(3,)` means a 1D array with 3 elements, meanwhile the shape `(3,1)` means a 2D array with 3 rows and a single column.\n:::\n\nSometimes these differences are just superficial, or the result of data impurities. NumPy provides a method called `np.squeeze` which flattens the arrays by removing axes of length 1.\n\n##### A More Natural Example of a Multidimensional `ndarray`\n\n#### Getting the Dimension\n\nTo get the dimension, we use `ndarray.ndim`. \n\n#### Getting the Data Types of The Elements\n\n`ndarray`s can include numeric types (int, unsigned int, float, complex), text types (string), and null. However, as mentioned above, `ndarrays` can't include more than one data type. To get the data type of the elements, we use `ndarray.dtype`. \n\n#### Reshape\n\nWe can reshape `ndarrays` where it makes sense. For example, we can reshape `array3`, of shape `(2,3)` into an array of shape `(3,2)`, `(6,1)`, or `(1,6)`. \n\nProviding the value `-1` for either row or column makes the reshape automatic across that dimension. For instance, instead of `array3.reshape(3,2)` we could say `array3.reshape(-1,2)` or `array3.reshape(3,-1)`. This would achieve the same effect.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":{"source":"repo"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"numpy_quick_start_guide.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","grid":{"sidebar-width":"450px","margin-width":"350px","body-width":"1200px"},"theme":{"light":["flatly","../../theme-light.scss"],"dark":["flatly","../../theme-dark.scss"]},"title":"NumPy: Quick Start Guide","author":"Vahram Poghosyan","date":"2023-10-27","categories":["Python","NumPy","Machine Learning"],"image":"numpy_quick_start_guide.png","repo-url":"https://www.example.com","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}