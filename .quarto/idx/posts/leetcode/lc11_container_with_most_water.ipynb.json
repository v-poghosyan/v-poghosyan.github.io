{"title":"LC11 - Container with Most Water","markdown":{"yaml":{"title":"LC11 - Container with Most Water","author":"Vahram Poghosyan","date":"2022-01-23","categories":["Leetcode","Algorithms"],"image":"leetcode.png","format":{"html":{"code-fold":true}},"jupyter":"python3","include-after-body":{"text":"<script type=\"application/javascript\" src=\"../../javascript/light-dark.js\"></script>\n"}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\n## Problem Statement\n\nWe are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`-th line are `(i, 0)` and `(i, height[i])`.\n\nThe objective is to find two lines which, together with the x-axis, form a container which can hold the most water.\n\nWe should return the maximum amount of water this container can store.\n\n**Example**\n\n![Container with most water](../../assets/leetcode/lc11_container_with_most_water/container_with_most_water.light.png)\n\n```\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\n```\n\n**Explanation**\n\nThe above vertical lines are represented by array `[1,8,6,2,5,4,8,3,7]`. In this case, the max area of the water (highlighted section) the container can contain is 49 (in units of area).\n\n## Foreword\n\n### Brute Force Solution\n\nThe brute force solution to this problem consists of checking each pair of vertical lines (or each subarray of size $\\geq 2)$. Since order of any given pair does not matter, this solution has time complexity ${O \\left ({n \\choose 2} \\right )= O \\left (\\frac{n(n-1)}{2} \\right ) = O(n^2)}$ where $n$ is the length of the `height` array.\n\n### Two Pointer Solution\n\nThe non-brute-force solution, i.e. the *Two Pointer Solution*, follows trivially after discovering an optimal substructure of the problem. The optimal substructure allows us to remove certain pairs $(i,j)$ from consideration, thereby reducing the number of pairs to be considered.The difficulty lies in noticing and proving the optimal substructure.\n\n#### Optimal Substructure\n\n- Let $h(i)$ denote the height of the $i$-th vertical line.\n\n- Let $a(i,j)$ denote the area of the container formed by the pair of vertical lines $(i,j)$.\n\n- Let $maxArea(i,j)$ denote the maximum area formed by the lines ${i,...,j}$ – that is the output of the procedure on the subarray `height[i:j]`. \n\nSuppose, without loss of generality, $h(1) \\leq h(n)$. Then, the problem has top-down optimal substructure:\n\n<br>\n$$maxArea(1,n) = max\\{a(1,n), maxArea(2,n)\\}$$\n<br>\n\n\n::: {.callout-tip title=\"Note\" appearance=\"minimal\" collapse=\"false\"}\nThe optimal substructure also offers an obvious DP solution to the problem. We simply consider the sub-problems of sizes $n-1$, $n-2$, and so on. However, in order to minimize the complexity, we offer a tabulation approach instead — the Two Pointer Solution.\n:::\n\n#### Proof of Optimal Substructure\n\nFor the initial pair $(1,n)$ where $h(1) \\leq h(n)$ we have $a(1,n) > a(1,k)  \\ \\ \\forall k$. This is because we're starting out from the *widest container* formed by ${(1,n)}$ and considering containers of decreasing width formed by the pairs ${(1, n-1), (1, n-2), ..., (1,2)}$. \n\n \n\nIn case ${h(k) > h(1)}$ for some ${n \\geq k > 1}$ the area of the container formed by ${(1,k)}$ is still determined by ${h(1)}$, except now it's less wide. Whereas if ${h(k) < h(1)}$ the area of the container decreases not only in width but also in height. \n\nIn both cases we have ${a(1,n) > a(1,k)}$ which means in general ${a(1,n) > a(1, k) \\ \\ \\forall k}$.\n\nTherefore, we may omit the first vertical line from consideration and consider the subproblem on the indices ${2,...,n}$. The overall optimal solution will then be $maxArea(1,n) = max\\{a(1,n), maxArea(2,n)\\}$\nas was the claim.\n\n\n#### The Two Pointers Algorithm\n\nAt this point, the Two Pointers Algorithm is trivial to come up with:\n\n- Initialize two pointers, 'left' and 'right', at the first and last index respectively.\n- While the pointers do not intersect:\n    - Calculate the area of the container formed by the pointers and determine if it's the maximum area encountered so far\n    - Keep the position of the pointer of the vertical line that's longer fixed\n    - Advance the pointer of vertical line that's shorter towards the fixed pointer\n   \n##### The Code\n\n# Conclusion\n\nWith some raw intuition it would've been possible to come up with the Two Pointer Solution without identifying and proving the optimal substructure at all. However, without a full justification the solution simply feels unrewarding. With some problems it's not enough to solve them, there is more insight to be gained by understanding *why* the correct solution is, in fact, correct.\n\n![](../../assets/leetcode/lc11_container_with_most_water/container_with_most_water.dark.png){height=0}\n","srcMarkdownNoYaml":"\n\n# Introduction\n\n## Problem Statement\n\nWe are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`-th line are `(i, 0)` and `(i, height[i])`.\n\nThe objective is to find two lines which, together with the x-axis, form a container which can hold the most water.\n\nWe should return the maximum amount of water this container can store.\n\n**Example**\n\n![Container with most water](../../assets/leetcode/lc11_container_with_most_water/container_with_most_water.light.png)\n\n```\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\n```\n\n**Explanation**\n\nThe above vertical lines are represented by array `[1,8,6,2,5,4,8,3,7]`. In this case, the max area of the water (highlighted section) the container can contain is 49 (in units of area).\n\n## Foreword\n\n### Brute Force Solution\n\nThe brute force solution to this problem consists of checking each pair of vertical lines (or each subarray of size $\\geq 2)$. Since order of any given pair does not matter, this solution has time complexity ${O \\left ({n \\choose 2} \\right )= O \\left (\\frac{n(n-1)}{2} \\right ) = O(n^2)}$ where $n$ is the length of the `height` array.\n\n### Two Pointer Solution\n\nThe non-brute-force solution, i.e. the *Two Pointer Solution*, follows trivially after discovering an optimal substructure of the problem. The optimal substructure allows us to remove certain pairs $(i,j)$ from consideration, thereby reducing the number of pairs to be considered.The difficulty lies in noticing and proving the optimal substructure.\n\n#### Optimal Substructure\n\n- Let $h(i)$ denote the height of the $i$-th vertical line.\n\n- Let $a(i,j)$ denote the area of the container formed by the pair of vertical lines $(i,j)$.\n\n- Let $maxArea(i,j)$ denote the maximum area formed by the lines ${i,...,j}$ – that is the output of the procedure on the subarray `height[i:j]`. \n\nSuppose, without loss of generality, $h(1) \\leq h(n)$. Then, the problem has top-down optimal substructure:\n\n<br>\n$$maxArea(1,n) = max\\{a(1,n), maxArea(2,n)\\}$$\n<br>\n\n\n::: {.callout-tip title=\"Note\" appearance=\"minimal\" collapse=\"false\"}\nThe optimal substructure also offers an obvious DP solution to the problem. We simply consider the sub-problems of sizes $n-1$, $n-2$, and so on. However, in order to minimize the complexity, we offer a tabulation approach instead — the Two Pointer Solution.\n:::\n\n#### Proof of Optimal Substructure\n\nFor the initial pair $(1,n)$ where $h(1) \\leq h(n)$ we have $a(1,n) > a(1,k)  \\ \\ \\forall k$. This is because we're starting out from the *widest container* formed by ${(1,n)}$ and considering containers of decreasing width formed by the pairs ${(1, n-1), (1, n-2), ..., (1,2)}$. \n\n \n\nIn case ${h(k) > h(1)}$ for some ${n \\geq k > 1}$ the area of the container formed by ${(1,k)}$ is still determined by ${h(1)}$, except now it's less wide. Whereas if ${h(k) < h(1)}$ the area of the container decreases not only in width but also in height. \n\nIn both cases we have ${a(1,n) > a(1,k)}$ which means in general ${a(1,n) > a(1, k) \\ \\ \\forall k}$.\n\nTherefore, we may omit the first vertical line from consideration and consider the subproblem on the indices ${2,...,n}$. The overall optimal solution will then be $maxArea(1,n) = max\\{a(1,n), maxArea(2,n)\\}$\nas was the claim.\n\n\n#### The Two Pointers Algorithm\n\nAt this point, the Two Pointers Algorithm is trivial to come up with:\n\n- Initialize two pointers, 'left' and 'right', at the first and last index respectively.\n- While the pointers do not intersect:\n    - Calculate the area of the container formed by the pointers and determine if it's the maximum area encountered so far\n    - Keep the position of the pointer of the vertical line that's longer fixed\n    - Advance the pointer of vertical line that's shorter towards the fixed pointer\n   \n##### The Code\n\n# Conclusion\n\nWith some raw intuition it would've been possible to come up with the Two Pointer Solution without identifying and proving the optimal substructure at all. However, without a full justification the solution simply feels unrewarding. With some problems it's not enough to solve them, there is more insight to be gained by understanding *why* the correct solution is, in fact, correct.\n\n![](../../assets/leetcode/lc11_container_with_most_water/container_with_most_water.dark.png){height=0}\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"include-after-body":{"text":"<script type=\"application/javascript\" src=\"../../javascript/light-dark.js\"></script>\n"},"output-file":"lc11_container_with_most_water.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","grid":{"sidebar-width":"450px","margin-width":"350px","body-width":"1200px"},"theme":{"light":["flatly","../../theme-light.scss"],"dark":["flatly","../../theme-dark.scss"]},"title-block-banner":true,"sidebar":true,"comments":{"utterances":{"repo":"v-poghosyan/blog"}},"title":"LC11 - Container with Most Water","author":"Vahram Poghosyan","date":"2022-01-23","categories":["Leetcode","Algorithms"],"image":"leetcode.png","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}